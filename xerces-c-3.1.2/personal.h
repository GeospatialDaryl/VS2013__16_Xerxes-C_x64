#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class personnelDataTable;
    public : ref class personDataTable;
    public : ref class nameDataTable;
    public : ref class familyDataTable;
    public : ref class givenDataTable;
    public : ref class emailDataTable;
    public : ref class urlDataTable;
    public : ref class linkDataTable;
    public : ref class personnelRow;
    public : ref class personRow;
    public : ref class nameRow;
    public : ref class familyRow;
    public : ref class givenRow;
    public : ref class emailRow;
    public : ref class urlRow;
    public : ref class linkRow;
    public : ref class personnelRowChangeEvent;
    public : ref class personRowChangeEvent;
    public : ref class nameRowChangeEvent;
    public : ref class familyRowChangeEvent;
    public : ref class givenRowChangeEvent;
    public : ref class emailRowChangeEvent;
    public : ref class urlRowChangeEvent;
    public : ref class linkRowChangeEvent;
    
    private: NewDataSet::personnelDataTable^  tablepersonnel;
    
    private: NewDataSet::personDataTable^  tableperson;
    
    private: NewDataSet::nameDataTable^  tablename;
    
    private: NewDataSet::familyDataTable^  tablefamily;
    
    private: NewDataSet::givenDataTable^  tablegiven;
    
    private: NewDataSet::emailDataTable^  tableemail;
    
    private: NewDataSet::urlDataTable^  tableurl;
    
    private: NewDataSet::linkDataTable^  tablelink;
    
    private: ::System::Data::DataRelation^  relationpersonnel_person;
    
    private: ::System::Data::DataRelation^  relationperson_name;
    
    private: ::System::Data::DataRelation^  relationname_family;
    
    private: ::System::Data::DataRelation^  relationname_given;
    
    private: ::System::Data::DataRelation^  relationperson_email;
    
    private: ::System::Data::DataRelation^  relationperson_url;
    
    private: ::System::Data::DataRelation^  relationperson_link;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void personnelRowChangeEventHandler(::System::Object^  sender, NewDataSet::personnelRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void personRowChangeEventHandler(::System::Object^  sender, NewDataSet::personRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void nameRowChangeEventHandler(::System::Object^  sender, NewDataSet::nameRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void familyRowChangeEventHandler(::System::Object^  sender, NewDataSet::familyRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void givenRowChangeEventHandler(::System::Object^  sender, NewDataSet::givenRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void emailRowChangeEventHandler(::System::Object^  sender, NewDataSet::emailRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void urlRowChangeEventHandler(::System::Object^  sender, NewDataSet::urlRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void linkRowChangeEventHandler(::System::Object^  sender, NewDataSet::linkRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::personnelDataTable^  personnel {
        NewDataSet::personnelDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::personDataTable^  person {
        NewDataSet::personDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::nameDataTable^  name {
        NewDataSet::nameDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::familyDataTable^  family {
        NewDataSet::familyDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::givenDataTable^  given {
        NewDataSet::givenDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::emailDataTable^  email {
        NewDataSet::emailDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::urlDataTable^  url {
        NewDataSet::urlDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::linkDataTable^  link {
        NewDataSet::linkDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializepersonnel();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeperson();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializename();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializefamily();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializegiven();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeemail();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeurl();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializelink();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class personnelDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnpersonnel_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personnelRowChangeEventHandler^  personnelRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personnelRowChangeEventHandler^  personnelRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personnelRowChangeEventHandler^  personnelRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personnelRowChangeEventHandler^  personnelRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personnelDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personnelDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personnelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  personnel_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personnelRow^  default [::System::Int32 ] {
            NewDataSet::personnelRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddpersonnelRow(NewDataSet::personnelRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::personnelRow^  AddpersonnelRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::personnelRow^  NewpersonnelRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovepersonnelRow(NewDataSet::personnelRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class personDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnid;
        
        private: ::System::Data::DataColumn^  columnnote;
        
        private: ::System::Data::DataColumn^  columncontr;
        
        private: ::System::Data::DataColumn^  columnsalary;
        
        private: ::System::Data::DataColumn^  columnperson_Id;
        
        private: ::System::Data::DataColumn^  columnpersonnel_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personRowChangeEventHandler^  personRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personRowChangeEventHandler^  personRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personRowChangeEventHandler^  personRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::personRowChangeEventHandler^  personRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  idColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  noteColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  contrColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  salaryColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  person_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  personnel_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  default [::System::Int32 ] {
            NewDataSet::personRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddpersonRow(NewDataSet::personRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::personRow^  AddpersonRow(System::String^  id, System::String^  note, System::String^  contr, System::Int64 salary, 
                    NewDataSet::personnelRow^  parentpersonnelRowBypersonnel_person);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::personRow^  NewpersonRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovepersonRow(NewDataSet::personRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class nameDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnname_Id;
        
        private: ::System::Data::DataColumn^  columnperson_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::nameRowChangeEventHandler^  nameRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::nameRowChangeEventHandler^  nameRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::nameRowChangeEventHandler^  nameRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::nameRowChangeEventHandler^  nameRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        nameDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        nameDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        nameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  name_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  person_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::nameRow^  default [::System::Int32 ] {
            NewDataSet::nameRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddnameRow(NewDataSet::nameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::nameRow^  AddnameRow(NewDataSet::personRow^  parentpersonRowByperson_name);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::nameRow^  NewnameRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovenameRow(NewDataSet::nameRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class familyDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnfamily_text;
        
        private: ::System::Data::DataColumn^  columnname_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::familyRowChangeEventHandler^  familyRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::familyRowChangeEventHandler^  familyRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::familyRowChangeEventHandler^  familyRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::familyRowChangeEventHandler^  familyRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        familyDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        familyDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        familyDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  family_textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  name_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::familyRow^  default [::System::Int32 ] {
            NewDataSet::familyRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddfamilyRow(NewDataSet::familyRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::familyRow^  AddfamilyRow(System::String^  family_text, NewDataSet::nameRow^  parentnameRowByname_family);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::familyRow^  NewfamilyRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovefamilyRow(NewDataSet::familyRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class givenDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columngiven_text;
        
        private: ::System::Data::DataColumn^  columnname_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::givenRowChangeEventHandler^  givenRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::givenRowChangeEventHandler^  givenRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::givenRowChangeEventHandler^  givenRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::givenRowChangeEventHandler^  givenRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        givenDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        givenDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        givenDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  given_textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  name_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::givenRow^  default [::System::Int32 ] {
            NewDataSet::givenRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddgivenRow(NewDataSet::givenRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::givenRow^  AddgivenRow(System::String^  given_text, NewDataSet::nameRow^  parentnameRowByname_given);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::givenRow^  NewgivenRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovegivenRow(NewDataSet::givenRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class emailDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnemail_Column;
        
        private: ::System::Data::DataColumn^  columnperson_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::emailRowChangeEventHandler^  emailRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::emailRowChangeEventHandler^  emailRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::emailRowChangeEventHandler^  emailRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::emailRowChangeEventHandler^  emailRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        emailDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        emailDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        emailDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  email_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  person_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::emailRow^  default [::System::Int32 ] {
            NewDataSet::emailRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddemailRow(NewDataSet::emailRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::emailRow^  AddemailRow(System::String^  email_Column, NewDataSet::personRow^  parentpersonRowByperson_email);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::emailRow^  NewemailRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveemailRow(NewDataSet::emailRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class urlDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnhref;
        
        private: ::System::Data::DataColumn^  columnperson_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::urlRowChangeEventHandler^  urlRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::urlRowChangeEventHandler^  urlRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::urlRowChangeEventHandler^  urlRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::urlRowChangeEventHandler^  urlRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        urlDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        urlDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        urlDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  hrefColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  person_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::urlRow^  default [::System::Int32 ] {
            NewDataSet::urlRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddurlRow(NewDataSet::urlRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::urlRow^  AddurlRow(System::String^  href, NewDataSet::personRow^  parentpersonRowByperson_url);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::urlRow^  NewurlRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveurlRow(NewDataSet::urlRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class linkDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnmanager;
        
        private: ::System::Data::DataColumn^  columnsubordinates;
        
        private: ::System::Data::DataColumn^  columnperson_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::linkRowChangeEventHandler^  linkRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::linkRowChangeEventHandler^  linkRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::linkRowChangeEventHandler^  linkRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::linkRowChangeEventHandler^  linkRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        linkDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        linkDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        linkDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  managerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  subordinatesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  person_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::linkRow^  default [::System::Int32 ] {
            NewDataSet::linkRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddlinkRow(NewDataSet::linkRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::linkRow^  AddlinkRow(System::String^  manager, System::String^  subordinates, NewDataSet::personRow^  parentpersonRowByperson_link);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::linkRow^  NewlinkRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovelinkRow(NewDataSet::linkRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class personnelRow : public ::System::Data::DataRow {
        
        private: NewDataSet::personnelDataTable^  tablepersonnel;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personnelRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 personnel_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::personRow^  >^  GetpersonRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class personRow : public ::System::Data::DataRow {
        
        private: NewDataSet::personDataTable^  tableperson;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  id {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  note {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  contr {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 salary {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 person_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 personnel_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personnelRow^  personnelRow {
            NewDataSet::personnelRow^  get();
            System::Void set(NewDataSet::personnelRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsnoteNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetnoteNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IscontrNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetcontrNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IssalaryNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetsalaryNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Ispersonnel_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setpersonnel_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::nameRow^  >^  GetnameRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::emailRow^  >^  GetemailRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::urlRow^  >^  GeturlRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::linkRow^  >^  GetlinkRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class nameRow : public ::System::Data::DataRow {
        
        private: NewDataSet::nameDataTable^  tablename;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        nameRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 name_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 person_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  personRow {
            NewDataSet::personRow^  get();
            System::Void set(NewDataSet::personRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isperson_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setperson_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::familyRow^  >^  GetfamilyRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::givenRow^  >^  GetgivenRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class familyRow : public ::System::Data::DataRow {
        
        private: NewDataSet::familyDataTable^  tablefamily;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        familyRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  family_text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 name_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::nameRow^  nameRow {
            NewDataSet::nameRow^  get();
            System::Void set(NewDataSet::nameRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isname_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setname_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class givenRow : public ::System::Data::DataRow {
        
        private: NewDataSet::givenDataTable^  tablegiven;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        givenRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  given_text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 name_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::nameRow^  nameRow {
            NewDataSet::nameRow^  get();
            System::Void set(NewDataSet::nameRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isname_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setname_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class emailRow : public ::System::Data::DataRow {
        
        private: NewDataSet::emailDataTable^  tableemail;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        emailRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  email_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 person_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  personRow {
            NewDataSet::personRow^  get();
            System::Void set(NewDataSet::personRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isemail_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setemail_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isperson_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setperson_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class urlRow : public ::System::Data::DataRow {
        
        private: NewDataSet::urlDataTable^  tableurl;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        urlRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  href {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 person_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  personRow {
            NewDataSet::personRow^  get();
            System::Void set(NewDataSet::personRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IshrefNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SethrefNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isperson_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setperson_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class linkRow : public ::System::Data::DataRow {
        
        private: NewDataSet::linkDataTable^  tablelink;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        linkRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  manager {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  subordinates {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 person_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  personRow {
            NewDataSet::personRow^  get();
            System::Void set(NewDataSet::personRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsmanagerNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetmanagerNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IssubordinatesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetsubordinatesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isperson_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setperson_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class personnelRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::personnelRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personnelRowChangeEvent(NewDataSet::personnelRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personnelRow^  Row {
            NewDataSet::personnelRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class personRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::personRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        personRowChangeEvent(NewDataSet::personRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::personRow^  Row {
            NewDataSet::personRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class nameRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::nameRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        nameRowChangeEvent(NewDataSet::nameRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::nameRow^  Row {
            NewDataSet::nameRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class familyRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::familyRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        familyRowChangeEvent(NewDataSet::familyRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::familyRow^  Row {
            NewDataSet::familyRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class givenRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::givenRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        givenRowChangeEvent(NewDataSet::givenRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::givenRow^  Row {
            NewDataSet::givenRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class emailRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::emailRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        emailRowChangeEvent(NewDataSet::emailRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::emailRow^  Row {
            NewDataSet::emailRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class urlRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::urlRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        urlRowChangeEvent(NewDataSet::urlRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::urlRow^  Row {
            NewDataSet::urlRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class linkRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::linkRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        linkRowChangeEvent(NewDataSet::linkRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::linkRow^  Row {
            NewDataSet::linkRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"personnel"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::personnelDataTable(ds->Tables[L"personnel"])));
        }
        if (ds->Tables[L"person"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::personDataTable(ds->Tables[L"person"])));
        }
        if (ds->Tables[L"name"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::nameDataTable(ds->Tables[L"name"])));
        }
        if (ds->Tables[L"family"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::familyDataTable(ds->Tables[L"family"])));
        }
        if (ds->Tables[L"given"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::givenDataTable(ds->Tables[L"given"])));
        }
        if (ds->Tables[L"email"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::emailDataTable(ds->Tables[L"email"])));
        }
        if (ds->Tables[L"url"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::urlDataTable(ds->Tables[L"url"])));
        }
        if (ds->Tables[L"link"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::linkDataTable(ds->Tables[L"link"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::personnelDataTable^  NewDataSet::personnel::get() {
    return this->tablepersonnel;
}

inline NewDataSet::personDataTable^  NewDataSet::person::get() {
    return this->tableperson;
}

inline NewDataSet::nameDataTable^  NewDataSet::name::get() {
    return this->tablename;
}

inline NewDataSet::familyDataTable^  NewDataSet::family::get() {
    return this->tablefamily;
}

inline NewDataSet::givenDataTable^  NewDataSet::given::get() {
    return this->tablegiven;
}

inline NewDataSet::emailDataTable^  NewDataSet::email::get() {
    return this->tableemail;
}

inline NewDataSet::urlDataTable^  NewDataSet::url::get() {
    return this->tableurl;
}

inline NewDataSet::linkDataTable^  NewDataSet::link::get() {
    return this->tablelink;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"personnel"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::personnelDataTable(ds->Tables[L"personnel"])));
        }
        if (ds->Tables[L"person"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::personDataTable(ds->Tables[L"person"])));
        }
        if (ds->Tables[L"name"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::nameDataTable(ds->Tables[L"name"])));
        }
        if (ds->Tables[L"family"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::familyDataTable(ds->Tables[L"family"])));
        }
        if (ds->Tables[L"given"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::givenDataTable(ds->Tables[L"given"])));
        }
        if (ds->Tables[L"email"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::emailDataTable(ds->Tables[L"email"])));
        }
        if (ds->Tables[L"url"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::urlDataTable(ds->Tables[L"url"])));
        }
        if (ds->Tables[L"link"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::linkDataTable(ds->Tables[L"link"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tablepersonnel = (cli::safe_cast<NewDataSet::personnelDataTable^  >(__super::Tables[L"personnel"]));
    if (initTable == true) {
        if (this->tablepersonnel != nullptr) {
            this->tablepersonnel->InitVars();
        }
    }
    this->tableperson = (cli::safe_cast<NewDataSet::personDataTable^  >(__super::Tables[L"person"]));
    if (initTable == true) {
        if (this->tableperson != nullptr) {
            this->tableperson->InitVars();
        }
    }
    this->tablename = (cli::safe_cast<NewDataSet::nameDataTable^  >(__super::Tables[L"name"]));
    if (initTable == true) {
        if (this->tablename != nullptr) {
            this->tablename->InitVars();
        }
    }
    this->tablefamily = (cli::safe_cast<NewDataSet::familyDataTable^  >(__super::Tables[L"family"]));
    if (initTable == true) {
        if (this->tablefamily != nullptr) {
            this->tablefamily->InitVars();
        }
    }
    this->tablegiven = (cli::safe_cast<NewDataSet::givenDataTable^  >(__super::Tables[L"given"]));
    if (initTable == true) {
        if (this->tablegiven != nullptr) {
            this->tablegiven->InitVars();
        }
    }
    this->tableemail = (cli::safe_cast<NewDataSet::emailDataTable^  >(__super::Tables[L"email"]));
    if (initTable == true) {
        if (this->tableemail != nullptr) {
            this->tableemail->InitVars();
        }
    }
    this->tableurl = (cli::safe_cast<NewDataSet::urlDataTable^  >(__super::Tables[L"url"]));
    if (initTable == true) {
        if (this->tableurl != nullptr) {
            this->tableurl->InitVars();
        }
    }
    this->tablelink = (cli::safe_cast<NewDataSet::linkDataTable^  >(__super::Tables[L"link"]));
    if (initTable == true) {
        if (this->tablelink != nullptr) {
            this->tablelink->InitVars();
        }
    }
    this->relationpersonnel_person = this->Relations[L"personnel_person"];
    this->relationperson_name = this->Relations[L"person_name"];
    this->relationname_family = this->Relations[L"name_family"];
    this->relationname_given = this->Relations[L"name_given"];
    this->relationperson_email = this->Relations[L"person_email"];
    this->relationperson_url = this->Relations[L"person_url"];
    this->relationperson_link = this->Relations[L"person_link"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablepersonnel = (gcnew NewDataSet::personnelDataTable());
    __super::Tables->Add(this->tablepersonnel);
    this->tableperson = (gcnew NewDataSet::personDataTable());
    __super::Tables->Add(this->tableperson);
    this->tablename = (gcnew NewDataSet::nameDataTable());
    __super::Tables->Add(this->tablename);
    this->tablefamily = (gcnew NewDataSet::familyDataTable());
    __super::Tables->Add(this->tablefamily);
    this->tablegiven = (gcnew NewDataSet::givenDataTable());
    __super::Tables->Add(this->tablegiven);
    this->tableemail = (gcnew NewDataSet::emailDataTable());
    __super::Tables->Add(this->tableemail);
    this->tableurl = (gcnew NewDataSet::urlDataTable());
    __super::Tables->Add(this->tableurl);
    this->tablelink = (gcnew NewDataSet::linkDataTable());
    __super::Tables->Add(this->tablelink);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"personnel_person", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepersonnel->personnel_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->personnel_IdColumn}));
    this->tableperson->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"person_name", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->person_IdColumn}));
    this->tablename->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"name_family", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->name_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefamily->name_IdColumn}));
    this->tablefamily->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"name_given", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->name_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegiven->name_IdColumn}));
    this->tablegiven->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"person_email", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableemail->person_IdColumn}));
    this->tableemail->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"person_url", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableurl->person_IdColumn}));
    this->tableurl->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"person_link", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelink->person_IdColumn}));
    this->tablelink->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationpersonnel_person = (gcnew ::System::Data::DataRelation(L"personnel_person", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepersonnel->personnel_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->personnel_IdColumn}, false));
    this->relationpersonnel_person->Nested = true;
    this->Relations->Add(this->relationpersonnel_person);
    this->relationperson_name = (gcnew ::System::Data::DataRelation(L"person_name", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->person_IdColumn}, false));
    this->relationperson_name->Nested = true;
    this->Relations->Add(this->relationperson_name);
    this->relationname_family = (gcnew ::System::Data::DataRelation(L"name_family", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->name_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefamily->name_IdColumn}, false));
    this->relationname_family->Nested = true;
    this->Relations->Add(this->relationname_family);
    this->relationname_given = (gcnew ::System::Data::DataRelation(L"name_given", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablename->name_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegiven->name_IdColumn}, false));
    this->relationname_given->Nested = true;
    this->Relations->Add(this->relationname_given);
    this->relationperson_email = (gcnew ::System::Data::DataRelation(L"person_email", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableemail->person_IdColumn}, false));
    this->relationperson_email->Nested = true;
    this->Relations->Add(this->relationperson_email);
    this->relationperson_url = (gcnew ::System::Data::DataRelation(L"person_url", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableurl->person_IdColumn}, false));
    this->relationperson_url->Nested = true;
    this->Relations->Add(this->relationperson_url);
    this->relationperson_link = (gcnew ::System::Data::DataRelation(L"person_link", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableperson->person_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelink->person_IdColumn}, false));
    this->relationperson_link->Nested = true;
    this->Relations->Add(this->relationperson_link);
}

inline ::System::Boolean NewDataSet::ShouldSerializepersonnel() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeperson() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializename() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializefamily() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializegiven() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeemail() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeurl() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializelink() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::personnelDataTable::personnelDataTable() {
    this->TableName = L"personnel";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::personnelDataTable::personnelDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::personnelDataTable::personnelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::personnelDataTable::personnel_IdColumn::get() {
    return this->columnpersonnel_Id;
}

inline ::System::Int32 NewDataSet::personnelDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::personnelRow^  NewDataSet::personnelDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::personnelRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::personnelDataTable::AddpersonnelRow(NewDataSet::personnelRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::personnelRow^  NewDataSet::personnelDataTable::AddpersonnelRow() {
    NewDataSet::personnelRow^  rowpersonnelRow = (cli::safe_cast<NewDataSet::personnelRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowpersonnelRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowpersonnelRow);
    return rowpersonnelRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::personnelDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::personnelDataTable::Clone() {
    NewDataSet::personnelDataTable^  cln = (cli::safe_cast<NewDataSet::personnelDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::personnelDataTable::CreateInstance() {
    return (gcnew NewDataSet::personnelDataTable());
}

inline ::System::Void NewDataSet::personnelDataTable::InitVars() {
    this->columnpersonnel_Id = __super::Columns[L"personnel_Id"];
}

inline ::System::Void NewDataSet::personnelDataTable::InitClass() {
    this->columnpersonnel_Id = (gcnew ::System::Data::DataColumn(L"personnel_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnpersonnel_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnpersonnel_Id}, 
            true)));
    this->columnpersonnel_Id->AutoIncrement = true;
    this->columnpersonnel_Id->AllowDBNull = false;
    this->columnpersonnel_Id->Unique = true;
}

inline NewDataSet::personnelRow^  NewDataSet::personnelDataTable::NewpersonnelRow() {
    return (cli::safe_cast<NewDataSet::personnelRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::personnelDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::personnelRow(builder));
}

inline ::System::Type^  NewDataSet::personnelDataTable::GetRowType() {
    return NewDataSet::personnelRow::typeid;
}

inline ::System::Void NewDataSet::personnelDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->personnelRowChanged(this, (gcnew NewDataSet::personnelRowChangeEvent((cli::safe_cast<NewDataSet::personnelRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personnelDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->personnelRowChanging(this, (gcnew NewDataSet::personnelRowChangeEvent((cli::safe_cast<NewDataSet::personnelRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personnelDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->personnelRowDeleted(this, (gcnew NewDataSet::personnelRowChangeEvent((cli::safe_cast<NewDataSet::personnelRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personnelDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->personnelRowDeleting(this, (gcnew NewDataSet::personnelRowChangeEvent((cli::safe_cast<NewDataSet::personnelRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personnelDataTable::RemovepersonnelRow(NewDataSet::personnelRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::personnelDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"personnelDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::personDataTable::personDataTable() {
    this->TableName = L"person";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::personDataTable::personDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::personDataTable::personDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::idColumn::get() {
    return this->columnid;
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::noteColumn::get() {
    return this->columnnote;
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::contrColumn::get() {
    return this->columncontr;
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::salaryColumn::get() {
    return this->columnsalary;
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::person_IdColumn::get() {
    return this->columnperson_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::personDataTable::personnel_IdColumn::get() {
    return this->columnpersonnel_Id;
}

inline ::System::Int32 NewDataSet::personDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::personRow^  NewDataSet::personDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::personDataTable::AddpersonRow(NewDataSet::personRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::personRow^  NewDataSet::personDataTable::AddpersonRow(System::String^  id, System::String^  note, System::String^  contr, 
            System::Int64 salary, NewDataSet::personnelRow^  parentpersonnelRowBypersonnel_person) {
    NewDataSet::personRow^  rowpersonRow = (cli::safe_cast<NewDataSet::personRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {id, note, contr, salary, 
        nullptr, nullptr};
    if (parentpersonnelRowBypersonnel_person != nullptr) {
        columnValuesArray[5] = parentpersonnelRowBypersonnel_person[0];
    }
    rowpersonRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowpersonRow);
    return rowpersonRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::personDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::personDataTable::Clone() {
    NewDataSet::personDataTable^  cln = (cli::safe_cast<NewDataSet::personDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::personDataTable::CreateInstance() {
    return (gcnew NewDataSet::personDataTable());
}

inline ::System::Void NewDataSet::personDataTable::InitVars() {
    this->columnid = __super::Columns[L"id"];
    this->columnnote = __super::Columns[L"note"];
    this->columncontr = __super::Columns[L"contr"];
    this->columnsalary = __super::Columns[L"salary"];
    this->columnperson_Id = __super::Columns[L"person_Id"];
    this->columnpersonnel_Id = __super::Columns[L"personnel_Id"];
}

inline ::System::Void NewDataSet::personDataTable::InitClass() {
    this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnid);
    this->columnnote = (gcnew ::System::Data::DataColumn(L"note", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnnote);
    this->columncontr = (gcnew ::System::Data::DataColumn(L"contr", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columncontr);
    this->columnsalary = (gcnew ::System::Data::DataColumn(L"salary", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnsalary);
    this->columnperson_Id = (gcnew ::System::Data::DataColumn(L"person_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnperson_Id);
    this->columnpersonnel_Id = (gcnew ::System::Data::DataColumn(L"personnel_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnpersonnel_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnperson_Id}, 
            true)));
    this->columnid->AllowDBNull = false;
    this->columnid->Namespace = L"";
    this->columnnote->Namespace = L"";
    this->columncontr->Namespace = L"";
    this->columncontr->DefaultValue = (cli::safe_cast<System::String^  >(L"false"));
    this->columnsalary->Namespace = L"";
    this->columnperson_Id->AutoIncrement = true;
    this->columnperson_Id->AllowDBNull = false;
    this->columnperson_Id->Unique = true;
}

inline NewDataSet::personRow^  NewDataSet::personDataTable::NewpersonRow() {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::personDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::personRow(builder));
}

inline ::System::Type^  NewDataSet::personDataTable::GetRowType() {
    return NewDataSet::personRow::typeid;
}

inline ::System::Void NewDataSet::personDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->personRowChanged(this, (gcnew NewDataSet::personRowChangeEvent((cli::safe_cast<NewDataSet::personRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->personRowChanging(this, (gcnew NewDataSet::personRowChangeEvent((cli::safe_cast<NewDataSet::personRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->personRowDeleted(this, (gcnew NewDataSet::personRowChangeEvent((cli::safe_cast<NewDataSet::personRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->personRowDeleting(this, (gcnew NewDataSet::personRowChangeEvent((cli::safe_cast<NewDataSet::personRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::personDataTable::RemovepersonRow(NewDataSet::personRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::personDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"personDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::nameDataTable::nameDataTable() {
    this->TableName = L"name";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::nameDataTable::nameDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::nameDataTable::nameDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::nameDataTable::name_IdColumn::get() {
    return this->columnname_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::nameDataTable::person_IdColumn::get() {
    return this->columnperson_Id;
}

inline ::System::Int32 NewDataSet::nameDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::nameRow^  NewDataSet::nameDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::nameRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::nameDataTable::AddnameRow(NewDataSet::nameRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::nameRow^  NewDataSet::nameDataTable::AddnameRow(NewDataSet::personRow^  parentpersonRowByperson_name) {
    NewDataSet::nameRow^  rownameRow = (cli::safe_cast<NewDataSet::nameRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentpersonRowByperson_name != nullptr) {
        columnValuesArray[1] = parentpersonRowByperson_name[4];
    }
    rownameRow->ItemArray = columnValuesArray;
    this->Rows->Add(rownameRow);
    return rownameRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::nameDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::nameDataTable::Clone() {
    NewDataSet::nameDataTable^  cln = (cli::safe_cast<NewDataSet::nameDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::nameDataTable::CreateInstance() {
    return (gcnew NewDataSet::nameDataTable());
}

inline ::System::Void NewDataSet::nameDataTable::InitVars() {
    this->columnname_Id = __super::Columns[L"name_Id"];
    this->columnperson_Id = __super::Columns[L"person_Id"];
}

inline ::System::Void NewDataSet::nameDataTable::InitClass() {
    this->columnname_Id = (gcnew ::System::Data::DataColumn(L"name_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnname_Id);
    this->columnperson_Id = (gcnew ::System::Data::DataColumn(L"person_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnperson_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnname_Id}, 
            true)));
    this->columnname_Id->AutoIncrement = true;
    this->columnname_Id->AllowDBNull = false;
    this->columnname_Id->Unique = true;
}

inline NewDataSet::nameRow^  NewDataSet::nameDataTable::NewnameRow() {
    return (cli::safe_cast<NewDataSet::nameRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::nameDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::nameRow(builder));
}

inline ::System::Type^  NewDataSet::nameDataTable::GetRowType() {
    return NewDataSet::nameRow::typeid;
}

inline ::System::Void NewDataSet::nameDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->nameRowChanged(this, (gcnew NewDataSet::nameRowChangeEvent((cli::safe_cast<NewDataSet::nameRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::nameDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->nameRowChanging(this, (gcnew NewDataSet::nameRowChangeEvent((cli::safe_cast<NewDataSet::nameRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::nameDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->nameRowDeleted(this, (gcnew NewDataSet::nameRowChangeEvent((cli::safe_cast<NewDataSet::nameRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::nameDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->nameRowDeleting(this, (gcnew NewDataSet::nameRowChangeEvent((cli::safe_cast<NewDataSet::nameRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::nameDataTable::RemovenameRow(NewDataSet::nameRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::nameDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"nameDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::familyDataTable::familyDataTable() {
    this->TableName = L"family";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::familyDataTable::familyDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::familyDataTable::familyDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::familyDataTable::family_textColumn::get() {
    return this->columnfamily_text;
}

inline ::System::Data::DataColumn^  NewDataSet::familyDataTable::name_IdColumn::get() {
    return this->columnname_Id;
}

inline ::System::Int32 NewDataSet::familyDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::familyRow^  NewDataSet::familyDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::familyRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::familyDataTable::AddfamilyRow(NewDataSet::familyRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::familyRow^  NewDataSet::familyDataTable::AddfamilyRow(System::String^  family_text, NewDataSet::nameRow^  parentnameRowByname_family) {
    NewDataSet::familyRow^  rowfamilyRow = (cli::safe_cast<NewDataSet::familyRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {family_text, nullptr};
    if (parentnameRowByname_family != nullptr) {
        columnValuesArray[1] = parentnameRowByname_family[0];
    }
    rowfamilyRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowfamilyRow);
    return rowfamilyRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::familyDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::familyDataTable::Clone() {
    NewDataSet::familyDataTable^  cln = (cli::safe_cast<NewDataSet::familyDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::familyDataTable::CreateInstance() {
    return (gcnew NewDataSet::familyDataTable());
}

inline ::System::Void NewDataSet::familyDataTable::InitVars() {
    this->columnfamily_text = __super::Columns[L"family_text"];
    this->columnname_Id = __super::Columns[L"name_Id"];
}

inline ::System::Void NewDataSet::familyDataTable::InitClass() {
    this->columnfamily_text = (gcnew ::System::Data::DataColumn(L"family_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnfamily_text);
    this->columnname_Id = (gcnew ::System::Data::DataColumn(L"name_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnname_Id);
    this->columnfamily_text->AllowDBNull = false;
}

inline NewDataSet::familyRow^  NewDataSet::familyDataTable::NewfamilyRow() {
    return (cli::safe_cast<NewDataSet::familyRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::familyDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::familyRow(builder));
}

inline ::System::Type^  NewDataSet::familyDataTable::GetRowType() {
    return NewDataSet::familyRow::typeid;
}

inline ::System::Void NewDataSet::familyDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->familyRowChanged(this, (gcnew NewDataSet::familyRowChangeEvent((cli::safe_cast<NewDataSet::familyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::familyDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->familyRowChanging(this, (gcnew NewDataSet::familyRowChangeEvent((cli::safe_cast<NewDataSet::familyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::familyDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->familyRowDeleted(this, (gcnew NewDataSet::familyRowChangeEvent((cli::safe_cast<NewDataSet::familyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::familyDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->familyRowDeleting(this, (gcnew NewDataSet::familyRowChangeEvent((cli::safe_cast<NewDataSet::familyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::familyDataTable::RemovefamilyRow(NewDataSet::familyRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::familyDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"familyDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::givenDataTable::givenDataTable() {
    this->TableName = L"given";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::givenDataTable::givenDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::givenDataTable::givenDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::givenDataTable::given_textColumn::get() {
    return this->columngiven_text;
}

inline ::System::Data::DataColumn^  NewDataSet::givenDataTable::name_IdColumn::get() {
    return this->columnname_Id;
}

inline ::System::Int32 NewDataSet::givenDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::givenRow^  NewDataSet::givenDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::givenRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::givenDataTable::AddgivenRow(NewDataSet::givenRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::givenRow^  NewDataSet::givenDataTable::AddgivenRow(System::String^  given_text, NewDataSet::nameRow^  parentnameRowByname_given) {
    NewDataSet::givenRow^  rowgivenRow = (cli::safe_cast<NewDataSet::givenRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {given_text, nullptr};
    if (parentnameRowByname_given != nullptr) {
        columnValuesArray[1] = parentnameRowByname_given[0];
    }
    rowgivenRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowgivenRow);
    return rowgivenRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::givenDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::givenDataTable::Clone() {
    NewDataSet::givenDataTable^  cln = (cli::safe_cast<NewDataSet::givenDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::givenDataTable::CreateInstance() {
    return (gcnew NewDataSet::givenDataTable());
}

inline ::System::Void NewDataSet::givenDataTable::InitVars() {
    this->columngiven_text = __super::Columns[L"given_text"];
    this->columnname_Id = __super::Columns[L"name_Id"];
}

inline ::System::Void NewDataSet::givenDataTable::InitClass() {
    this->columngiven_text = (gcnew ::System::Data::DataColumn(L"given_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columngiven_text);
    this->columnname_Id = (gcnew ::System::Data::DataColumn(L"name_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnname_Id);
    this->columngiven_text->AllowDBNull = false;
}

inline NewDataSet::givenRow^  NewDataSet::givenDataTable::NewgivenRow() {
    return (cli::safe_cast<NewDataSet::givenRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::givenDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::givenRow(builder));
}

inline ::System::Type^  NewDataSet::givenDataTable::GetRowType() {
    return NewDataSet::givenRow::typeid;
}

inline ::System::Void NewDataSet::givenDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->givenRowChanged(this, (gcnew NewDataSet::givenRowChangeEvent((cli::safe_cast<NewDataSet::givenRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::givenDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->givenRowChanging(this, (gcnew NewDataSet::givenRowChangeEvent((cli::safe_cast<NewDataSet::givenRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::givenDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->givenRowDeleted(this, (gcnew NewDataSet::givenRowChangeEvent((cli::safe_cast<NewDataSet::givenRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::givenDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->givenRowDeleting(this, (gcnew NewDataSet::givenRowChangeEvent((cli::safe_cast<NewDataSet::givenRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::givenDataTable::RemovegivenRow(NewDataSet::givenRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::givenDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"givenDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::emailDataTable::emailDataTable() {
    this->TableName = L"email";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::emailDataTable::emailDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::emailDataTable::emailDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::emailDataTable::email_ColumnColumn::get() {
    return this->columnemail_Column;
}

inline ::System::Data::DataColumn^  NewDataSet::emailDataTable::person_IdColumn::get() {
    return this->columnperson_Id;
}

inline ::System::Int32 NewDataSet::emailDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::emailRow^  NewDataSet::emailDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::emailRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::emailDataTable::AddemailRow(NewDataSet::emailRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::emailRow^  NewDataSet::emailDataTable::AddemailRow(System::String^  email_Column, NewDataSet::personRow^  parentpersonRowByperson_email) {
    NewDataSet::emailRow^  rowemailRow = (cli::safe_cast<NewDataSet::emailRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {email_Column, nullptr};
    if (parentpersonRowByperson_email != nullptr) {
        columnValuesArray[1] = parentpersonRowByperson_email[4];
    }
    rowemailRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowemailRow);
    return rowemailRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::emailDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::emailDataTable::Clone() {
    NewDataSet::emailDataTable^  cln = (cli::safe_cast<NewDataSet::emailDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::emailDataTable::CreateInstance() {
    return (gcnew NewDataSet::emailDataTable());
}

inline ::System::Void NewDataSet::emailDataTable::InitVars() {
    this->columnemail_Column = __super::Columns[L"email_Column"];
    this->columnperson_Id = __super::Columns[L"person_Id"];
}

inline ::System::Void NewDataSet::emailDataTable::InitClass() {
    this->columnemail_Column = (gcnew ::System::Data::DataColumn(L"email_Column", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnemail_Column);
    this->columnperson_Id = (gcnew ::System::Data::DataColumn(L"person_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnperson_Id);
}

inline NewDataSet::emailRow^  NewDataSet::emailDataTable::NewemailRow() {
    return (cli::safe_cast<NewDataSet::emailRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::emailDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::emailRow(builder));
}

inline ::System::Type^  NewDataSet::emailDataTable::GetRowType() {
    return NewDataSet::emailRow::typeid;
}

inline ::System::Void NewDataSet::emailDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->emailRowChanged(this, (gcnew NewDataSet::emailRowChangeEvent((cli::safe_cast<NewDataSet::emailRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::emailDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->emailRowChanging(this, (gcnew NewDataSet::emailRowChangeEvent((cli::safe_cast<NewDataSet::emailRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::emailDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->emailRowDeleted(this, (gcnew NewDataSet::emailRowChangeEvent((cli::safe_cast<NewDataSet::emailRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::emailDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->emailRowDeleting(this, (gcnew NewDataSet::emailRowChangeEvent((cli::safe_cast<NewDataSet::emailRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::emailDataTable::RemoveemailRow(NewDataSet::emailRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::emailDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"emailDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::urlDataTable::urlDataTable() {
    this->TableName = L"url";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::urlDataTable::urlDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::urlDataTable::urlDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::urlDataTable::hrefColumn::get() {
    return this->columnhref;
}

inline ::System::Data::DataColumn^  NewDataSet::urlDataTable::person_IdColumn::get() {
    return this->columnperson_Id;
}

inline ::System::Int32 NewDataSet::urlDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::urlRow^  NewDataSet::urlDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::urlRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::urlDataTable::AddurlRow(NewDataSet::urlRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::urlRow^  NewDataSet::urlDataTable::AddurlRow(System::String^  href, NewDataSet::personRow^  parentpersonRowByperson_url) {
    NewDataSet::urlRow^  rowurlRow = (cli::safe_cast<NewDataSet::urlRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {href, nullptr};
    if (parentpersonRowByperson_url != nullptr) {
        columnValuesArray[1] = parentpersonRowByperson_url[4];
    }
    rowurlRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowurlRow);
    return rowurlRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::urlDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::urlDataTable::Clone() {
    NewDataSet::urlDataTable^  cln = (cli::safe_cast<NewDataSet::urlDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::urlDataTable::CreateInstance() {
    return (gcnew NewDataSet::urlDataTable());
}

inline ::System::Void NewDataSet::urlDataTable::InitVars() {
    this->columnhref = __super::Columns[L"href"];
    this->columnperson_Id = __super::Columns[L"person_Id"];
}

inline ::System::Void NewDataSet::urlDataTable::InitClass() {
    this->columnhref = (gcnew ::System::Data::DataColumn(L"href", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnhref);
    this->columnperson_Id = (gcnew ::System::Data::DataColumn(L"person_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnperson_Id);
    this->columnhref->Namespace = L"";
    this->columnhref->DefaultValue = (cli::safe_cast<System::String^  >(L"http://"));
}

inline NewDataSet::urlRow^  NewDataSet::urlDataTable::NewurlRow() {
    return (cli::safe_cast<NewDataSet::urlRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::urlDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::urlRow(builder));
}

inline ::System::Type^  NewDataSet::urlDataTable::GetRowType() {
    return NewDataSet::urlRow::typeid;
}

inline ::System::Void NewDataSet::urlDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->urlRowChanged(this, (gcnew NewDataSet::urlRowChangeEvent((cli::safe_cast<NewDataSet::urlRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::urlDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->urlRowChanging(this, (gcnew NewDataSet::urlRowChangeEvent((cli::safe_cast<NewDataSet::urlRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::urlDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->urlRowDeleted(this, (gcnew NewDataSet::urlRowChangeEvent((cli::safe_cast<NewDataSet::urlRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::urlDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->urlRowDeleting(this, (gcnew NewDataSet::urlRowChangeEvent((cli::safe_cast<NewDataSet::urlRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::urlDataTable::RemoveurlRow(NewDataSet::urlRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::urlDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"urlDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::linkDataTable::linkDataTable() {
    this->TableName = L"link";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::linkDataTable::linkDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::linkDataTable::linkDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::linkDataTable::managerColumn::get() {
    return this->columnmanager;
}

inline ::System::Data::DataColumn^  NewDataSet::linkDataTable::subordinatesColumn::get() {
    return this->columnsubordinates;
}

inline ::System::Data::DataColumn^  NewDataSet::linkDataTable::person_IdColumn::get() {
    return this->columnperson_Id;
}

inline ::System::Int32 NewDataSet::linkDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::linkRow^  NewDataSet::linkDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::linkRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::linkDataTable::AddlinkRow(NewDataSet::linkRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::linkRow^  NewDataSet::linkDataTable::AddlinkRow(System::String^  manager, System::String^  subordinates, 
            NewDataSet::personRow^  parentpersonRowByperson_link) {
    NewDataSet::linkRow^  rowlinkRow = (cli::safe_cast<NewDataSet::linkRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {manager, subordinates, 
        nullptr};
    if (parentpersonRowByperson_link != nullptr) {
        columnValuesArray[2] = parentpersonRowByperson_link[4];
    }
    rowlinkRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowlinkRow);
    return rowlinkRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::linkDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::linkDataTable::Clone() {
    NewDataSet::linkDataTable^  cln = (cli::safe_cast<NewDataSet::linkDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::linkDataTable::CreateInstance() {
    return (gcnew NewDataSet::linkDataTable());
}

inline ::System::Void NewDataSet::linkDataTable::InitVars() {
    this->columnmanager = __super::Columns[L"manager"];
    this->columnsubordinates = __super::Columns[L"subordinates"];
    this->columnperson_Id = __super::Columns[L"person_Id"];
}

inline ::System::Void NewDataSet::linkDataTable::InitClass() {
    this->columnmanager = (gcnew ::System::Data::DataColumn(L"manager", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnmanager);
    this->columnsubordinates = (gcnew ::System::Data::DataColumn(L"subordinates", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnsubordinates);
    this->columnperson_Id = (gcnew ::System::Data::DataColumn(L"person_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnperson_Id);
    this->columnmanager->Namespace = L"";
    this->columnsubordinates->Namespace = L"";
}

inline NewDataSet::linkRow^  NewDataSet::linkDataTable::NewlinkRow() {
    return (cli::safe_cast<NewDataSet::linkRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::linkDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::linkRow(builder));
}

inline ::System::Type^  NewDataSet::linkDataTable::GetRowType() {
    return NewDataSet::linkRow::typeid;
}

inline ::System::Void NewDataSet::linkDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->linkRowChanged(this, (gcnew NewDataSet::linkRowChangeEvent((cli::safe_cast<NewDataSet::linkRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::linkDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->linkRowChanging(this, (gcnew NewDataSet::linkRowChangeEvent((cli::safe_cast<NewDataSet::linkRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::linkDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->linkRowDeleted(this, (gcnew NewDataSet::linkRowChangeEvent((cli::safe_cast<NewDataSet::linkRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::linkDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->linkRowDeleting(this, (gcnew NewDataSet::linkRowChangeEvent((cli::safe_cast<NewDataSet::linkRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::linkDataTable::RemovelinkRow(NewDataSet::linkRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::linkDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"linkDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::personnelRow::personnelRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablepersonnel = (cli::safe_cast<NewDataSet::personnelDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::personnelRow::personnel_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablepersonnel->personnel_IdColumn]));
}
inline System::Void NewDataSet::personnelRow::personnel_Id::set(System::Int32 value) {
    this[this->tablepersonnel->personnel_IdColumn] = value;
}

inline cli::array< NewDataSet::personRow^  >^  NewDataSet::personnelRow::GetpersonRows() {
    if (this->Table->ChildRelations[L"personnel_person"] == nullptr) {
        return gcnew cli::array< NewDataSet::personRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::personRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"personnel_person"])));
    }
}


inline NewDataSet::personRow::personRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableperson = (cli::safe_cast<NewDataSet::personDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::personRow::id::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableperson->idColumn]));
}
inline System::Void NewDataSet::personRow::id::set(System::String^  value) {
    this[this->tableperson->idColumn] = value;
}

inline System::String^  NewDataSet::personRow::note::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableperson->noteColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'note\' in table \'person\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::personRow::note::set(System::String^  value) {
    this[this->tableperson->noteColumn] = value;
}

inline System::String^  NewDataSet::personRow::contr::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableperson->contrColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'contr\' in table \'person\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::personRow::contr::set(System::String^  value) {
    this[this->tableperson->contrColumn] = value;
}

inline System::Int64 NewDataSet::personRow::salary::get() {
    try {
        return (cli::safe_cast<::System::Int64 >(this[this->tableperson->salaryColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'salary\' in table \'person\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::personRow::salary::set(System::Int64 value) {
    this[this->tableperson->salaryColumn] = value;
}

inline System::Int32 NewDataSet::personRow::person_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableperson->person_IdColumn]));
}
inline System::Void NewDataSet::personRow::person_Id::set(System::Int32 value) {
    this[this->tableperson->person_IdColumn] = value;
}

inline System::Int32 NewDataSet::personRow::personnel_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableperson->personnel_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'personnel_Id\' in table \'person\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::personRow::personnel_Id::set(System::Int32 value) {
    this[this->tableperson->personnel_IdColumn] = value;
}

inline NewDataSet::personnelRow^  NewDataSet::personRow::personnelRow::get() {
    return (cli::safe_cast<NewDataSet::personnelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"personnel_person"])));
}
inline System::Void NewDataSet::personRow::personnelRow::set(NewDataSet::personnelRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"personnel_person"]);
}

inline ::System::Boolean NewDataSet::personRow::IsnoteNull() {
    return this->IsNull(this->tableperson->noteColumn);
}

inline ::System::Void NewDataSet::personRow::SetnoteNull() {
    this[this->tableperson->noteColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::personRow::IscontrNull() {
    return this->IsNull(this->tableperson->contrColumn);
}

inline ::System::Void NewDataSet::personRow::SetcontrNull() {
    this[this->tableperson->contrColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::personRow::IssalaryNull() {
    return this->IsNull(this->tableperson->salaryColumn);
}

inline ::System::Void NewDataSet::personRow::SetsalaryNull() {
    this[this->tableperson->salaryColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::personRow::Ispersonnel_IdNull() {
    return this->IsNull(this->tableperson->personnel_IdColumn);
}

inline ::System::Void NewDataSet::personRow::Setpersonnel_IdNull() {
    this[this->tableperson->personnel_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::nameRow^  >^  NewDataSet::personRow::GetnameRows() {
    if (this->Table->ChildRelations[L"person_name"] == nullptr) {
        return gcnew cli::array< NewDataSet::nameRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::nameRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"person_name"])));
    }
}

inline cli::array< NewDataSet::emailRow^  >^  NewDataSet::personRow::GetemailRows() {
    if (this->Table->ChildRelations[L"person_email"] == nullptr) {
        return gcnew cli::array< NewDataSet::emailRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::emailRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"person_email"])));
    }
}

inline cli::array< NewDataSet::urlRow^  >^  NewDataSet::personRow::GeturlRows() {
    if (this->Table->ChildRelations[L"person_url"] == nullptr) {
        return gcnew cli::array< NewDataSet::urlRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::urlRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"person_url"])));
    }
}

inline cli::array< NewDataSet::linkRow^  >^  NewDataSet::personRow::GetlinkRows() {
    if (this->Table->ChildRelations[L"person_link"] == nullptr) {
        return gcnew cli::array< NewDataSet::linkRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::linkRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"person_link"])));
    }
}


inline NewDataSet::nameRow::nameRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablename = (cli::safe_cast<NewDataSet::nameDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::nameRow::name_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablename->name_IdColumn]));
}
inline System::Void NewDataSet::nameRow::name_Id::set(System::Int32 value) {
    this[this->tablename->name_IdColumn] = value;
}

inline System::Int32 NewDataSet::nameRow::person_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablename->person_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'person_Id\' in table \'name\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::nameRow::person_Id::set(System::Int32 value) {
    this[this->tablename->person_IdColumn] = value;
}

inline NewDataSet::personRow^  NewDataSet::nameRow::personRow::get() {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->GetParentRow(this->Table->ParentRelations[L"person_name"])));
}
inline System::Void NewDataSet::nameRow::personRow::set(NewDataSet::personRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"person_name"]);
}

inline ::System::Boolean NewDataSet::nameRow::Isperson_IdNull() {
    return this->IsNull(this->tablename->person_IdColumn);
}

inline ::System::Void NewDataSet::nameRow::Setperson_IdNull() {
    this[this->tablename->person_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::familyRow^  >^  NewDataSet::nameRow::GetfamilyRows() {
    if (this->Table->ChildRelations[L"name_family"] == nullptr) {
        return gcnew cli::array< NewDataSet::familyRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::familyRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"name_family"])));
    }
}

inline cli::array< NewDataSet::givenRow^  >^  NewDataSet::nameRow::GetgivenRows() {
    if (this->Table->ChildRelations[L"name_given"] == nullptr) {
        return gcnew cli::array< NewDataSet::givenRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::givenRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"name_given"])));
    }
}


inline NewDataSet::familyRow::familyRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablefamily = (cli::safe_cast<NewDataSet::familyDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::familyRow::family_text::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablefamily->family_textColumn]));
}
inline System::Void NewDataSet::familyRow::family_text::set(System::String^  value) {
    this[this->tablefamily->family_textColumn] = value;
}

inline System::Int32 NewDataSet::familyRow::name_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablefamily->name_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name_Id\' in table \'family\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::familyRow::name_Id::set(System::Int32 value) {
    this[this->tablefamily->name_IdColumn] = value;
}

inline NewDataSet::nameRow^  NewDataSet::familyRow::nameRow::get() {
    return (cli::safe_cast<NewDataSet::nameRow^  >(this->GetParentRow(this->Table->ParentRelations[L"name_family"])));
}
inline System::Void NewDataSet::familyRow::nameRow::set(NewDataSet::nameRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"name_family"]);
}

inline ::System::Boolean NewDataSet::familyRow::Isname_IdNull() {
    return this->IsNull(this->tablefamily->name_IdColumn);
}

inline ::System::Void NewDataSet::familyRow::Setname_IdNull() {
    this[this->tablefamily->name_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::givenRow::givenRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablegiven = (cli::safe_cast<NewDataSet::givenDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::givenRow::given_text::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablegiven->given_textColumn]));
}
inline System::Void NewDataSet::givenRow::given_text::set(System::String^  value) {
    this[this->tablegiven->given_textColumn] = value;
}

inline System::Int32 NewDataSet::givenRow::name_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablegiven->name_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name_Id\' in table \'given\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::givenRow::name_Id::set(System::Int32 value) {
    this[this->tablegiven->name_IdColumn] = value;
}

inline NewDataSet::nameRow^  NewDataSet::givenRow::nameRow::get() {
    return (cli::safe_cast<NewDataSet::nameRow^  >(this->GetParentRow(this->Table->ParentRelations[L"name_given"])));
}
inline System::Void NewDataSet::givenRow::nameRow::set(NewDataSet::nameRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"name_given"]);
}

inline ::System::Boolean NewDataSet::givenRow::Isname_IdNull() {
    return this->IsNull(this->tablegiven->name_IdColumn);
}

inline ::System::Void NewDataSet::givenRow::Setname_IdNull() {
    this[this->tablegiven->name_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::emailRow::emailRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableemail = (cli::safe_cast<NewDataSet::emailDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::emailRow::email_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableemail->email_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'email_Column\' in table \'email\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::emailRow::email_Column::set(System::String^  value) {
    this[this->tableemail->email_ColumnColumn] = value;
}

inline System::Int32 NewDataSet::emailRow::person_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableemail->person_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'person_Id\' in table \'email\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::emailRow::person_Id::set(System::Int32 value) {
    this[this->tableemail->person_IdColumn] = value;
}

inline NewDataSet::personRow^  NewDataSet::emailRow::personRow::get() {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->GetParentRow(this->Table->ParentRelations[L"person_email"])));
}
inline System::Void NewDataSet::emailRow::personRow::set(NewDataSet::personRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"person_email"]);
}

inline ::System::Boolean NewDataSet::emailRow::Isemail_ColumnNull() {
    return this->IsNull(this->tableemail->email_ColumnColumn);
}

inline ::System::Void NewDataSet::emailRow::Setemail_ColumnNull() {
    this[this->tableemail->email_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::emailRow::Isperson_IdNull() {
    return this->IsNull(this->tableemail->person_IdColumn);
}

inline ::System::Void NewDataSet::emailRow::Setperson_IdNull() {
    this[this->tableemail->person_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::urlRow::urlRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableurl = (cli::safe_cast<NewDataSet::urlDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::urlRow::href::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableurl->hrefColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'href\' in table \'url\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::urlRow::href::set(System::String^  value) {
    this[this->tableurl->hrefColumn] = value;
}

inline System::Int32 NewDataSet::urlRow::person_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableurl->person_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'person_Id\' in table \'url\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::urlRow::person_Id::set(System::Int32 value) {
    this[this->tableurl->person_IdColumn] = value;
}

inline NewDataSet::personRow^  NewDataSet::urlRow::personRow::get() {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->GetParentRow(this->Table->ParentRelations[L"person_url"])));
}
inline System::Void NewDataSet::urlRow::personRow::set(NewDataSet::personRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"person_url"]);
}

inline ::System::Boolean NewDataSet::urlRow::IshrefNull() {
    return this->IsNull(this->tableurl->hrefColumn);
}

inline ::System::Void NewDataSet::urlRow::SethrefNull() {
    this[this->tableurl->hrefColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::urlRow::Isperson_IdNull() {
    return this->IsNull(this->tableurl->person_IdColumn);
}

inline ::System::Void NewDataSet::urlRow::Setperson_IdNull() {
    this[this->tableurl->person_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::linkRow::linkRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablelink = (cli::safe_cast<NewDataSet::linkDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::linkRow::manager::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablelink->managerColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'manager\' in table \'link\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::linkRow::manager::set(System::String^  value) {
    this[this->tablelink->managerColumn] = value;
}

inline System::String^  NewDataSet::linkRow::subordinates::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablelink->subordinatesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subordinates\' in table \'link\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::linkRow::subordinates::set(System::String^  value) {
    this[this->tablelink->subordinatesColumn] = value;
}

inline System::Int32 NewDataSet::linkRow::person_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelink->person_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'person_Id\' in table \'link\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::linkRow::person_Id::set(System::Int32 value) {
    this[this->tablelink->person_IdColumn] = value;
}

inline NewDataSet::personRow^  NewDataSet::linkRow::personRow::get() {
    return (cli::safe_cast<NewDataSet::personRow^  >(this->GetParentRow(this->Table->ParentRelations[L"person_link"])));
}
inline System::Void NewDataSet::linkRow::personRow::set(NewDataSet::personRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"person_link"]);
}

inline ::System::Boolean NewDataSet::linkRow::IsmanagerNull() {
    return this->IsNull(this->tablelink->managerColumn);
}

inline ::System::Void NewDataSet::linkRow::SetmanagerNull() {
    this[this->tablelink->managerColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::linkRow::IssubordinatesNull() {
    return this->IsNull(this->tablelink->subordinatesColumn);
}

inline ::System::Void NewDataSet::linkRow::SetsubordinatesNull() {
    this[this->tablelink->subordinatesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::linkRow::Isperson_IdNull() {
    return this->IsNull(this->tablelink->person_IdColumn);
}

inline ::System::Void NewDataSet::linkRow::Setperson_IdNull() {
    this[this->tablelink->person_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::personnelRowChangeEvent::personnelRowChangeEvent(NewDataSet::personnelRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::personnelRow^  NewDataSet::personnelRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::personnelRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::personRowChangeEvent::personRowChangeEvent(NewDataSet::personRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::personRow^  NewDataSet::personRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::personRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::nameRowChangeEvent::nameRowChangeEvent(NewDataSet::nameRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::nameRow^  NewDataSet::nameRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::nameRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::familyRowChangeEvent::familyRowChangeEvent(NewDataSet::familyRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::familyRow^  NewDataSet::familyRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::familyRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::givenRowChangeEvent::givenRowChangeEvent(NewDataSet::givenRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::givenRow^  NewDataSet::givenRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::givenRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::emailRowChangeEvent::emailRowChangeEvent(NewDataSet::emailRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::emailRow^  NewDataSet::emailRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::emailRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::urlRowChangeEvent::urlRowChangeEvent(NewDataSet::urlRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::urlRow^  NewDataSet::urlRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::urlRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::linkRowChangeEvent::linkRowChangeEvent(NewDataSet::linkRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::linkRow^  NewDataSet::linkRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::linkRowChangeEvent::Action::get() {
    return this->eventAction;
}
